/* Card Display/Position *//* Card Display/Position *//* Card Display/Position */

/* Play card size and shape */
.PlayCard {
	/* Display/Position */
	height: var(--cardHeightClamp);
	position: fixed;
	width: var(--cardWidthClamp);
	/* Border */
	border-radius: var(--borderRadius);
	/* Misc. */
	user-select: none;
}

/* Put card on top when it's being moved (works on desktop) */
	/* Using both hover and active for the same effect as active works better for mouse events, hover is for touch screens */
.PlayCard:active {
	/* Misc. */
	z-index: 99 !important;
}

.PlayCard:hover {
	/* Misc. */
	z-index: 99 !important;
}

/* Card Text CSS *//* Card Text CSS *//* Card Text CSS *//* Card Text CSS */

/* Display and Position of all card text */
.cardText {
	/* Display/Position */
	align-items: center;
	display: flex;
	height: calc(var(--cardHeightClamp) - (var(--borderWidth)*2));
	justify-content: space-between;
	flex-direction: column;
	padding: 0.1rem 0.3rem;	
}

/* Font on cards */
.cardText > p {
	/* Display/Position */
	align-items: center;
	display: flex;
	flex-direction: row;
	gap: 3px;
	justify-content: center;
	/* Font/Text */
	font-family: var(--fontSansSerif);
}

.suitImg {
	display: inline;
	height: clamp(1rem, 2vh, 2rem);
	transform: translate(0, 2px);
}

/* Small text on top of card */
.top {
	/* Display/Position */
	align-self: flex-start;
}

/* Large text in middle of card */
.middle {
	/* Display/Position */
	align-self: center;
	/* Font/Text */
	font-size: clamp(1rem, calc(var(--fontSize)*1.75), 3rem);
}

/* Small and upside-down text on card */
.bottom {
	/* Display/Position */
	align-self: flex-end;
	transform: scale(-1, -1);
}

/* Specific Color Setting (for red/black cards, and valid/invalid cards */
.red {
	/* Color/Background */
	background-color: var(--redColor);
}
.black {
	/* Color/Background */
	background-color: var(--blackColor);
}
.valid {
	/* Border */
	border: var(--border) var(--borderColor);
	/* Color/Background */
	color: black !important;
}
.invalid {
	/* Border */
	border: var(--border) var(--invalidColor);
	/* Color/Background */
	color: var(--invalidColor) !important;
}
.invalid.red {
	/* Color/Background */
	background-color: var(--redInvalidColor);
}
.invalid.black {
	/* Color/Background */
	background-color: var(--blackInvalidColor);
}

/* When the card is not available, but still trying to be rendered, show nothing (should not come up - Just in case) */
.empty {
	/* Misc. */
	visibility: hidden;
}